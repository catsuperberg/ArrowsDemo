//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Prefabs/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""0244154c-d07c-480d-8a14-3351962b1372"",
            ""actions"": [
                {
                    ""name"": ""X_axis"",
                    ""type"": ""Value"",
                    ""id"": ""24b7b2ca-9e2b-46a9-81df-2b27a32e9363"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone"",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Y_axis"",
                    ""type"": ""Value"",
                    ""id"": ""fafa626b-1e01-440f-a0ee-7df247c30e59"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone"",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8702fb8b-fe38-4754-ab47-227ce650a0d9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""58142e78-05ab-437d-9be6-a5c1878add35"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fb5c0df6-b9e2-4d82-9c13-dfcdd207e192"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0f8c542c-8577-4d2c-a5ca-43a68f4c1f92"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""49dcaed6-916f-4185-bfb0-d6e665e83463"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9844b0f5-f523-4630-8d91-529a9db74bd7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""TouchMovement"",
            ""id"": ""8048c009-6412-47e5-9d85-8af5372b33e2"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""Value"",
                    ""id"": ""8324c267-a7d2-44e7-ae2c-9f828966f1ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""Value"",
                    ""id"": ""88ba1249-1e38-4f12-8a41-5f63c19f4d2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""419561db-0a9f-48df-9fc0-7e60923ce7b7"",
                    ""path"": ""<Touchscreen>/primaryTouch/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97269a12-e6e6-4442-ba85-2a73e4f22804"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UISignals"",
            ""id"": ""3797fbfd-0460-43f6-80bf-f8f09c2982f2"",
            ""actions"": [
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""e7e81eb7-493f-4243-b4a6-7e2607c988b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""76354c9e-8132-410f-bfac-3b17954b8e88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""e144c858-8153-4477-938d-3c1a84bdd3c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""2229541f-7d0f-4da0-a345-5fda6288fd5b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f75b0b5-bdd9-4b4b-ac32-396de98adeaa"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73eb3f04-620b-4f6d-aff0-c0d85be71fe0"",
                    ""path"": ""*/{PrimaryAction}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""664acea3-8673-4899-9585-1eeab85b3b61"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9087ec7f-75bd-492b-a21d-9189fde7cd5d"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5b509c8-3501-4f15-aaca-ca8b51abc89f"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""015c0670-2292-4493-98ed-c176aa4ce493"",
                    ""path"": ""*/{Back}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""357769e0-739f-4843-8204-8984a484842f"",
                    ""path"": ""*/{Hatswitch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_X_axis = m_Movement.FindAction("X_axis", throwIfNotFound: true);
        m_Movement_Y_axis = m_Movement.FindAction("Y_axis", throwIfNotFound: true);
        // TouchMovement
        m_TouchMovement = asset.FindActionMap("TouchMovement", throwIfNotFound: true);
        m_TouchMovement_PrimaryContact = m_TouchMovement.FindAction("PrimaryContact", throwIfNotFound: true);
        m_TouchMovement_PrimaryPosition = m_TouchMovement.FindAction("PrimaryPosition", throwIfNotFound: true);
        // UISignals
        m_UISignals = asset.FindActionMap("UISignals", throwIfNotFound: true);
        m_UISignals_Enter = m_UISignals.FindAction("Enter", throwIfNotFound: true);
        m_UISignals_Esc = m_UISignals.FindAction("Esc", throwIfNotFound: true);
        m_UISignals_Back = m_UISignals.FindAction("Back", throwIfNotFound: true);
        m_UISignals_Direction = m_UISignals.FindAction("Direction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_X_axis;
    private readonly InputAction m_Movement_Y_axis;
    public struct MovementActions
    {
        private @Controls m_Wrapper;
        public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @X_axis => m_Wrapper.m_Movement_X_axis;
        public InputAction @Y_axis => m_Wrapper.m_Movement_Y_axis;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @X_axis.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnX_axis;
                @X_axis.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnX_axis;
                @X_axis.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnX_axis;
                @Y_axis.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnY_axis;
                @Y_axis.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnY_axis;
                @Y_axis.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnY_axis;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @X_axis.started += instance.OnX_axis;
                @X_axis.performed += instance.OnX_axis;
                @X_axis.canceled += instance.OnX_axis;
                @Y_axis.started += instance.OnY_axis;
                @Y_axis.performed += instance.OnY_axis;
                @Y_axis.canceled += instance.OnY_axis;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // TouchMovement
    private readonly InputActionMap m_TouchMovement;
    private ITouchMovementActions m_TouchMovementActionsCallbackInterface;
    private readonly InputAction m_TouchMovement_PrimaryContact;
    private readonly InputAction m_TouchMovement_PrimaryPosition;
    public struct TouchMovementActions
    {
        private @Controls m_Wrapper;
        public TouchMovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_TouchMovement_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_TouchMovement_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_TouchMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchMovementActions set) { return set.Get(); }
        public void SetCallbacks(ITouchMovementActions instance)
        {
            if (m_Wrapper.m_TouchMovementActionsCallbackInterface != null)
            {
                @PrimaryContact.started -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryContact;
                @PrimaryPosition.started -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryPosition;
            }
            m_Wrapper.m_TouchMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
            }
        }
    }
    public TouchMovementActions @TouchMovement => new TouchMovementActions(this);

    // UISignals
    private readonly InputActionMap m_UISignals;
    private IUISignalsActions m_UISignalsActionsCallbackInterface;
    private readonly InputAction m_UISignals_Enter;
    private readonly InputAction m_UISignals_Esc;
    private readonly InputAction m_UISignals_Back;
    private readonly InputAction m_UISignals_Direction;
    public struct UISignalsActions
    {
        private @Controls m_Wrapper;
        public UISignalsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Enter => m_Wrapper.m_UISignals_Enter;
        public InputAction @Esc => m_Wrapper.m_UISignals_Esc;
        public InputAction @Back => m_Wrapper.m_UISignals_Back;
        public InputAction @Direction => m_Wrapper.m_UISignals_Direction;
        public InputActionMap Get() { return m_Wrapper.m_UISignals; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UISignalsActions set) { return set.Get(); }
        public void SetCallbacks(IUISignalsActions instance)
        {
            if (m_Wrapper.m_UISignalsActionsCallbackInterface != null)
            {
                @Enter.started -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnEnter;
                @Esc.started -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnEsc;
                @Back.started -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnBack;
                @Direction.started -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnDirection;
                @Direction.performed -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnDirection;
                @Direction.canceled -= m_Wrapper.m_UISignalsActionsCallbackInterface.OnDirection;
            }
            m_Wrapper.m_UISignalsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
            }
        }
    }
    public UISignalsActions @UISignals => new UISignalsActions(this);
    public interface IMovementActions
    {
        void OnX_axis(InputAction.CallbackContext context);
        void OnY_axis(InputAction.CallbackContext context);
    }
    public interface ITouchMovementActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
    public interface IUISignalsActions
    {
        void OnEnter(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnDirection(InputAction.CallbackContext context);
    }
}
